#!/usr/bin/env python

import os
import sys
import das

if __name__ == "__main__":
   schema_type = None
   strict_schema = None
   verbose = False
   file_path = None
   data = None
   readonly = False
   darkmode = False

   args = sys.argv[1:]
   n = len(args)
   i = 0

   while i < n:
      arg = args[i]

      if arg in ("-st", "--schema-type"):
         i += 1
         if i >= n:
            print("-st/--schema-type flag expects an argument")
            sys.exit(1)
         schema_type = args[i]

      elif arg in ("-ss", "--strict-schema"):
         i += 1
         if i >= n:
            print("-ss/--strict-schema flag expects an argument")
            sys.exit(1)
         if args[i].lower() in ("1", "on", "true"):
            strict_schema = True
         elif args[i].lower() in ("0", "off", "false"):
            strict_schema = False
         else:
            print("Invalid value '%s' for -ss/--strict-schema flag")
            sys.exit(1)

      elif arg in ("-ro", "--read-only"):
         readonly = True

      elif arg in ("-v", "--verbose"):
         verbose = True

      elif arg in ("-dm", "--dark-mode"):
         darkmode = True

      elif arg in ("-h", "--help"):
         print("USAGE")
         print("  dasedit [OPTIONS] path?")
         print("")
         print("SYNOPSIS")
         print("  -st/--schema-type <s>                     : Explicitely set file schema type")
         print("  -ss/--strict-schema 0|1|on|off|true|false : Toggle strict schema check on/off")
         print("  -ro/--read-only                           : Read only mode")
         print("  -dm/--dark-mode                           : Use a dark color scheme (windows / linux only)")
         print("  -v/--verbose                              : Enable verbose mode")
         print("  -h/--help                                 : Show this help")
         print("")
         sys.exit(0)

      else:
         if file_path is not None:
            print("dasedit only accepts one positional argument")
            sys.exit(1)
         else:
            file_path = arg

      i += 1

   if file_path and os.path.isfile(file_path):
      try:
         data = das.read(file_path, schema_type=schema_type, strict_schema=strict_schema)
         if data._get_schema_type() is None:
            print("Data has no schema type")
            data = None
      except Exception, e:
         print("Not a valid das file: %s (%s)" % (file_path, e))
         data = None

   echo_only = False
   try:
      import Qt
   except Exception, e:
      print("Failed to import 'Qt' (%s)" % e)
      echo_only = True

   if not echo_only:
      from Qt import QtWidgets
      from Qt import QtGui
      from Qt import QtWidgets
      import das.qtui

      class Window(QtWidgets.QMainWindow):
         def __init__(self, data=None, path=None, parent=None):
            super(Window, self).__init__(parent)
            self.path = path
            self.setWindowTitle("DaS Simple Editor")
            menuBar = self.menuBar()
            actionOpen = QtWidgets.QAction(self)
            actionOpen.setText("Open")
            actionOpen.setShortcut("Ctrl+O")
            actionOpen.triggered.connect(self.onOpen)
            actionSave = QtWidgets.QAction(self)
            actionSave.setText("Save")
            actionSave.setShortcut("Ctrl+S")
            actionSave.setEnabled(False)
            actionSave.triggered.connect(self.onSave)
            actionSaveAs = QtWidgets.QAction(self)
            actionSaveAs.setText("Save As...")
            actionSaveAs.setShortcut("Ctrl+A")
            actionSaveAs.setEnabled(not readonly and data is not None)
            actionSaveAs.triggered.connect(self.onSaveAs)
            actionQuit = QtWidgets.QAction(self)
            actionQuit.setText("Quit")
            actionQuit.setShortcut("Ctrl+Q")
            actionQuit.triggered.connect(self.close)
            menuFile = menuBar.addMenu("File")
            newMenu = menuFile.addMenu("&New")
            # newMenu.setShortcut("Ctrl+N")
            for schemaName in sorted(das.list_schemas()):
               schema = das.get_schema(schemaName)
               schemaMenu = newMenu.addMenu(schemaName)
               for typeName in das.list_schema_types(schemaName, masters_only=True):
                  try:
                     # Only list the data that have a schema type
                     das.make_default(typeName)._get_schema_type()
                     # Put sub types under another menu
                     act = schemaMenu.addAction(typeName.split(".")[-1])
                     act.triggered.connect(self._makeNewCallback(typeName))
                  except:
                     # Ignore this type
                     pass
               subMenu = None
               for typeName in das.list_schema_types(schemaName, masters_only=False):
                  try:
                     # Put sub types under another menu
                     if not schema.is_master_type(typeName):
                        # Only list the data that have a schema type
                        das.make_default(typeName)._get_schema_type()
                        if subMenu is None:
                           subMenu = schemaMenu.addMenu("Sub-types")
                        act = subMenu.addAction(typeName.split(".")[-1])
                        act.triggered.connect(self._makeNewCallback(typeName))
                  except:
                     # Ignore this type
                     pass
            menuFile.addAction(actionOpen)
            menuFile.addAction(actionSave)
            menuFile.addAction(actionSaveAs)
            menuFile.addSeparator()
            menuFile.addAction(actionQuit)
            actionAbout = QtWidgets.QAction(self)
            actionAbout.setText('About')
            actionAbout.triggered.connect(self.onAbout)
            menuHelp = menuBar.addMenu('Help')
            menuHelp.addAction(actionAbout)
            self.statusBar = QtWidgets.QStatusBar()
            self.setStatusBar(self.statusBar)
            centralWidget = QtWidgets.QFrame()
            layout = QtWidgets.QVBoxLayout()
            layout.setContentsMargins(10, 10, 10, 10)
            layout.setSpacing(5)
            name = "<%s>" % ("data" if not self.path else os.path.basename(self.path))
            self.editWidget = das.qtui.Editor(data, name=name, readonly=readonly, headers=[], parent=centralWidget)
            self.infoLabel = QtWidgets.QLabel("", parent=centralWidget)
            layout.addWidget(self.editWidget, 1)
            layout.addWidget(self.infoLabel)
            centralWidget.setLayout(layout)
            self.setCentralWidget(centralWidget)
            self.editWidget.messageChanged.connect(self.onMessageChanged)
            self.editWidget.modelUpdated.connect(self.onModelUpdated)
            self.actionSave = actionSave
            self.actionSaveAs = actionSaveAs
            self.resize(800, 600)

         def onOpen(self):
            if not readonly and self.editWidget.hasDataChanged():
               rv = QtWidgets.QMessageBox.question(self, "Save Current Data", "Data has changed since it has been loaded.\nWould you like to save the changes?", buttons=QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No, defaultButton=QtWidgets.QMessageBox.No)
               if rv == QtWidgets.QMessageBox.Yes:
                  self.onSave()
            rv = QtWidgets.QFileDialog.getOpenFileName(self, "Open File", "", "All Files (*.*)")
            # PyQt4 and PySide behaves in a difference way
            #   PyQt4  : QFileDialog.getOpenFileName -> str        [file path]
            #   PySide : QFileDialog.getOpenFileName -> (str, str) [file path, filter]
            if not isinstance(rv, basestring):
               rv = rv[0]
            if rv and os.path.isfile(rv):
               try:
                  data = das.read(rv)
                  self.editWidget.setData(data)
                  self.path = rv
                  self.actionSaveAs.setEnabled(not readonly)
                  self.actionSave.setEnabled(False)
               except Exception, e:
                  QtWidgets.QMessageBox.critical(self, "Error", "Couldn't read file '%s'\n%s" % (rv, e), QtWidgets.QMessageBox.Close)

         def onSave(self):
            try:
               das.write(self.editWidget.getData(), self.path)
               self.editWidget.cleanData()
            except Exception, e:
               QtWidgets.QMessageBox.critical(self, "Error", "Couldn't save data to '%s'\n%s" % (self.path, e), QtWidgets.QMessageBox.Close)

         def onSaveAs(self):
            rv = QtWidgets.QFileDialog.getSaveFileName(self, "Save File", "", "All Files (*.*)")
            if not isinstance(rv, basestring):
               rv = rv[0]
            if rv:
               self.path = rv
               self.onSave()
               self.actionSave.setEnabled(False)

         def onAbout(self):
            pass

         def _makeNewCallback(self, typeName):
            def __callback():
               self.actionSaveAs.setEnabled(True)
               data = das.make_default(typeName)
               self.editWidget.setData(data, name="<%s>" % typeName)

            return __callback

         def onMessageChanged(self, msg):
            self.infoLabel.setText(msg)

         def onModelUpdated(self, model):
            if not readonly:
               self.actionSaveAs.setEnabled(True)
               if self.path is not None:
                  self.actionSave.setEnabled(model.hasDataChanged())
            if verbose and model.hasDataChanged():
               das.pprint(model.getData())


      style = ""
      #if sys.platform == "darwin":
      if Qt.__binding__ in ("PySide2", "PyQt5"):
         # Introduced in Qt5
         style = "fusion"
      else:
         if darkmode or sys.platform not in ("win32", "darwin"):
            style = "plastique"
      if style:
         if not style in map(lambda x: x.lower(), QtWidgets.QStyleFactory.keys()):
            style = ""
         else:
            QtWidgets.QApplication.setStyle(style)

      app = QtWidgets.QApplication.instance()
      if not app:
         app = QtWidgets.QApplication([sys.argv[0]])

      if style == "plastique" and darkmode:
         # Nuke-like color palette
         palette = app.palette()
   
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Window, QtGui.QColor(50,50,50))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.WindowText, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Base, QtGui.QColor(100,100,100))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, QtGui.QColor(90,90,90))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, QtGui.QColor(255,255,220))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, QtGui.QColor(0,0,0))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Text, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Button, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Highlight, QtGui.QColor(247,147,30))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, QtGui.QColor(255,255,255))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.BrightText, QtGui.QColor(255,255,255))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Shadow, QtGui.QColor(30,30,30))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Light, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Midlight, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Dark, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Mid, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.Link, QtGui.QColor(70,70,255))
         palette.setColor(QtGui.QPalette.Active, QtGui.QPalette.LinkVisited, QtGui.QColor(200,70,255))
         
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Window, QtGui.QColor(50,50,50))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Base, QtGui.QColor(100,100,100))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, QtGui.QColor(90,90,90))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, QtGui.QColor(255,255,220))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, QtGui.QColor(0,0,0))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Text, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Button, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, QtGui.QColor(191,191,191))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, QtGui.QColor(247,147,30))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, QtGui.QColor(255,255,255))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, QtGui.QColor(255,255,255))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, QtGui.QColor(30,30,30))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Light, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Link, QtGui.QColor(70,70,255))
         palette.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.LinkVisited, QtGui.QColor(200,70,255))
         
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Window, QtGui.QColor(50,50,50))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, QtGui.QColor(0,0,0))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Base, QtGui.QColor(60,60,60))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, QtGui.QColor(90,90,90))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, QtGui.QColor(255,255,220))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, QtGui.QColor(0,0,0))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Text, QtGui.QColor(141,141,141))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Button, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, QtGui.QColor(0,0,0))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, QtGui.QColor(247,147,30))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, QtGui.QColor(205,205,205))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, QtGui.QColor(205,205,205))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, QtGui.QColor(30,30,30))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Light, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, QtGui.QColor(80,80,80))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.Link, QtGui.QColor(70,70,255))
         palette.setColor(QtGui.QPalette.Disabled, QtGui.QPalette.LinkVisited, QtGui.QColor(200,70,255))
         
         app.setPalette(palette)

      win = Window(data=data, path=file_path)
      win.show()
      app.exec_()

   else:
      das.pprint(data)

   sys.exit(0)
