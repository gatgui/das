#!/usr/bin/env python
import os
import re
import sys
import das
import das.cli


def usage():
   print("SYNOPSIS")
   print("  daseval OPTIONS (<expression>)*")
   print("")
   print("OPTIONS")
   print("  -i/--input <path>  : Input file path (*)")
   print("  -o/--output <path> : Output file path (input file if not set")
   print("  -ov/--overwrite    : Overwrite existing output file")
   print("  -pp/--pretty-print : Pretty print output")
   print("  -dr/--dry-run      : Don't do anything")
   print("  -h/--help          : Show this help")
   print("")
   print("NOTE")
   print("  Top-level object is assigned to 'data' variable")
   print("")

if __name__ == "__main__":
   args = sys.argv[1:]
   nargs = len(args)

   infile = None
   outfile = None
   dryrun = False
   pretty = False
   overwrite = False
   exprs = []
   vals = []

   i = 0
   while i < nargs:
      arg = args[i]
      if arg in ("-h", "--help"):
         usage()
         sys.exit(0)
      elif arg in ("-dr", "--dry-run"):
         dryrun = True
      elif arg in ("-ov", "--overwrite"):
         overwrite = True
      elif arg in ("-pp", "--pretty-print"):
         pretty = True
      elif arg in ("-i", "--input", "-o", "--output"):
         i += 1
         if i >= nargs:
            sys.stderr.write("%s flag expects an argument\n" % arg)
            sys.exit(1)
         if arg.startswith("-i"):
            infile = args[i]
         else:
            outfile = args[i]
      else:
         exprs.append(arg)
      i += 1

   if infile is None:
      sys.stderr.write("No input\n")
      sys.exit(1)

   if outfile is None:
      outfile = infile

   try:
      data = das.read(infile)
   except Exception as e:
      sys.stderr.write("Failed to read file '%s' (%s)\n" % (e, infile))
      sys.exit(1)

   orgdata = das.copy(data)

   for expr in exprs:
      try:
         vals.append(das.cli.eval(data, expr))
      except Exception as e:
         sys.stderr.write("Failed to evaluate expression '%s' (%s)\n" % (expr, e))
         vals.append(None)
         continue

   if data != orgdata:
      if not dryrun:
         if os.path.isfile(outfile) and not overwrite:
            sys.stderr.write("Output file already exists\n")
            sys.exit(1)
         try:
            das.write(data, outfile)
         except Exception as e:
            sys.stderr.write("Failed to write file '%s' (%s)\n" % (outfile, e))
            sys.exit(1)
      else:
         das.pprint(data)

   if len(exprs) == 1:
      vals = vals[0]

   if pretty:
      das.pprint(vals)
   else:
      print(vals)

   sys.exit(0)
