#!/usr/bin/env python
import os
import re
import sys
import das
import das.cli


def usage():
   print("SYNOPSIS")
   print("  dasget OPTIONS (<key>)*")
   print("")
   print("OPTIONS")
   print("  -i/--input <path>  : Input file path (*)")
   print("  -pp/--pretty-print : Pretty print output")
   print("  -h/--help          : Show this help")
   print("")

if __name__ == "__main__":
   args = sys.argv[1:]
   nargs = len(args)

   infile = None
   pretty = False
   keys = []
   vals = []

   i = 0
   while i < nargs:
      arg = args[i]
      if arg in ("-h", "--help"):
         usage()
         sys.exit(0)
      elif arg in ("-dr", "--dry-run"):
         dryrun = True
      elif arg in ("-pp", "--pretty-print"):
         pretty = True
      elif arg in ("-i", "--input"):
         i += 1
         if i >= nargs:
            sys.stderr.write("%s flag expects an argument\n" % arg)
            sys.exit(1)
         infile = args[i]
      else:
         keys.append(arg)
      i += 1

   if infile is None:
      sys.stderr.write("No input\n")
      sys.exit(1)

   try:
      data = das.read(infile)
   except Exception as e:
      sys.stderr.write("Failed to read file '%s' (%s)\n" % (e, infile))
      sys.exit(1)

   for key in keys:
      try:
         vals.append(das.cli.get(data, key))
      except Exception as e:
         sys.stderr.write("Failed to get value for field '%s' (%s)\n" % (key, e))
         vals.append(None)

   if len(keys) == 1:
      vals = vals[0]

   if pretty:
      das.pprint(vals)
   else:
      print(vals)

   sys.exit(0)
