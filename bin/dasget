#!/usr/bin/env python
import os
import re
import sys
import das

def usage():
   print("SYNOPSIS")
   print("  dasget OPTIONS (<key>)*")
   print("")
   print("OPTIONS")
   print("  -i/--input <path>  : Input file path (*)")
   print("  -pp/--pretty-print : Pretty print output")
   print("  -v/--verbose       : Verbose mode")
   print("  -h/--help          : Show this help")
   print("")

def merge(parts):
   i = 0
   n = len(parts)
   o = []
   while i < n:
      part = parts[i]
      opencnt = 0
      opencnt += (part.count("(") + part.count("["))
      opencnt -= (part.count(")") + part.count("]"))
      while opencnt != 0:
         i += 1
         if i >= n:
            raise Exception("Unbalanced parenthesis or brackets")
         npart = parts[i]
         opencnt += (npart.count("(") + npart.count("["))
         opencnt -= (npart.count(")") + npart.count("]"))
         part += "." + npart
      o.append(part)
      i += 1
   return o

if __name__ == "__main__":
   args = sys.argv[1:]
   nargs = len(args)

   infile = None
   verbose = False
   pretty = False
   keys = []
   vals = []

   i = 0
   while i < nargs:
      arg = args[i]
      if arg in ("-h", "--help"):
         usage()
         sys.exit(0)
      elif arg in ("-v", "--verbose"):
         verbose = True
      elif arg in ("-dr", "--dry-run"):
         dryrun = True
      elif arg in ("-pp", "--pretty-print"):
         pretty = True
      elif arg in ("-i", "--input"):
         i += 1
         if i >= nargs:
            sys.stderr.write("%s flag expects an argument\n" % arg)
            sys.exit(1)
         infile = args[i]
      else:
         keys.append(arg)
      i += 1

   if infile is None:
      sys.stderr.write("No input\n")
      sys.exit(1)

   try:
      data = das.read(infile)
      if verbose:
         das.pprint(data)
   except Exception, e:
      sys.stderr.write("Failed to read file '%s' (%s)\n" % (e, infile))
      sys.exit(1)

   # subscripted field expression
   e = re.compile(r"^(.*)\[([^]]+)\]$")

   for key in keys:
      try:
         field = data

         parts = merge(key.split("."))

         for part in parts:
            if not part:
               continue

            m = e.match(part)
            if m is None:
               field = getattr(field, part)

            else:
               subscripts = []
               while m is not None:
                  subscripts.append(eval(m.group(2)))
                  part = m.group(1)
                  m = e.match(part)
               subscripts.reverse()

               field = getattr(field, part)
               for subscript in subscripts:
                  field = field[subscript]

         vals.append(field)

      except Exception, e:
         sys.stderr.write("Failed to get value for field '%s' (%s)\n" % (key, e))
         vals.append(None)

   if pretty:
      das.pprint(vals)
   else:
      print(vals)

   sys.exit(0)
